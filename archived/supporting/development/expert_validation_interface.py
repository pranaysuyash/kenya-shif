#!/usr/bin/env python3
"""
Expert Validation Workflow Interface
Interactive tool for healthcare experts to validate SHIF analyzer extractions

Author: Pranay for Dr. Rishi
Date: August 24, 2025
"""

import pandas as pd
import streamlit as st
import json
import os
from datetime import datetime
from typing import Dict, List, Optional

# Page configuration
st.set_page_config(
    page_title="SHIF Rules Expert Validation",
    page_icon="üè•",
    layout="wide",
    initial_sidebar_state="expanded"
)

class ValidationWorkflow:
    """Handles the expert validation workflow"""
    
    def __init__(self):
        self.validation_file = "expert_validations.jsonl"
        self.progress_file = "validation_progress.json"
    
    def load_extracted_rules(self, rules_file: str) -> pd.DataFrame:
        """Load rules extracted by the analyzer"""
        try:
            return pd.read_csv(rules_file)
        except Exception as e:
            st.error(f"Error loading rules file: {e}")
            return pd.DataFrame()
    
    def load_validation_progress(self) -> Dict:
        """Load validation progress from file"""
        if os.path.exists(self.progress_file):
            try:
                with open(self.progress_file, 'r') as f:
                    return json.load(f)
            except:
                return {}
        return {}
    
    def save_validation_progress(self, progress: Dict):
        """Save validation progress to file"""
        with open(self.progress_file, 'w') as f:
            json.dump(progress, f, indent=2)
    
    def save_validation(self, validation_data: Dict):
        """Save individual validation to JSONL file"""
        validation_data['timestamp'] = datetime.now().isoformat()
        validation_data['validator'] = st.session_state.get('validator_name', 'Unknown')
        
        with open(self.validation_file, 'a') as f:
            f.write(json.dumps(validation_data) + '\n')
    
    def get_validation_statistics(self, rules_df: pd.DataFrame) -> Dict:
        """Calculate validation statistics"""
        progress = self.load_validation_progress()
        total_rules = len(rules_df)
        validated_rules = len([k for k, v in progress.items() if v.get('status') == 'validated'])
        
        stats = {
            'total_rules': total_rules,
            'validated_rules': validated_rules,
            'pending_rules': total_rules - validated_rules,
            'validation_rate': (validated_rules / total_rules * 100) if total_rules > 0 else 0
        }
        
        # Count by validation outcome
        outcomes = {}
        for rule_id, data in progress.items():
            if data.get('status') == 'validated':
                outcome = data.get('validation_outcome', 'unknown')
                outcomes[outcome] = outcomes.get(outcome, 0) + 1
        
        stats['outcomes'] = outcomes
        return stats

def main():
    st.title("üè• SHIF Rules Expert Validation Interface")
    st.markdown("---")
    
    # Initialize workflow
    workflow = ValidationWorkflow()
    
    # Sidebar - Expert Setup
    with st.sidebar:
        st.header("üë®‚Äç‚öïÔ∏è Expert Setup")
        
        # Validator information
        if 'validator_name' not in st.session_state:
            st.session_state.validator_name = ""
        
        validator_name = st.text_input(
            "Your Name/ID",
            value=st.session_state.validator_name,
            help="Identifier for tracking your validations"
        )
        st.session_state.validator_name = validator_name
        
        # Expertise area
        expertise_area = st.selectbox(
            "Primary Expertise",
            ["General Medicine", "Dialysis/Nephrology", "Oncology", "Maternity", 
             "Emergency Medicine", "Surgery", "Diagnostics/Imaging", "Other"]
        )
        
        st.markdown("---")
        
        # Load rules file
        st.header("üìä Data Loading")
        uploaded_file = st.file_uploader(
            "Upload Rules CSV",
            type=['csv'],
            help="Upload the CSV file generated by SHIF analyzer"
        )
        
        if uploaded_file is not None:
            rules_df = pd.read_csv(uploaded_file)
            st.success(f"Loaded {len(rules_df)} rules")
        else:
            # Try to load default file
            default_files = ["rules.csv", "verification_results_final/rules.csv"]
            rules_df = None
            for file_path in default_files:
                if os.path.exists(file_path):
                    rules_df = workflow.load_extracted_rules(file_path)
                    if not rules_df.empty:
                        st.info(f"Loaded {len(rules_df)} rules from {file_path}")
                        break
            
            if rules_df is None or rules_df.empty:
                st.warning("Please upload a rules CSV file to begin validation")
                return
    
    # Main content area
    if 'rules_df' not in locals() or rules_df.empty:
        st.error("No rules data available. Please upload a CSV file.")
        return
    
    # Validation statistics
    stats = workflow.get_validation_statistics(rules_df)
    
    col1, col2, col3, col4 = st.columns(4)
    with col1:
        st.metric("Total Rules", stats['total_rules'])
    with col2:
        st.metric("Validated", stats['validated_rules'])
    with col3:
        st.metric("Pending", stats['pending_rules'])
    with col4:
        st.metric("Progress", f"{stats['validation_rate']:.1f}%")
    
    # Progress bar
    st.progress(stats['validation_rate'] / 100)
    
    # Validation outcomes breakdown
    if stats['outcomes']:
        st.subheader("üìà Validation Outcomes")
        outcome_cols = st.columns(len(stats['outcomes']))
        for i, (outcome, count) in enumerate(stats['outcomes'].items()):
            with outcome_cols[i]:
                st.metric(outcome.replace('_', ' ').title(), count)
    
    st.markdown("---")
    
    # Main validation interface
    tab1, tab2, tab3 = st.tabs(["üîç Rule Validation", "üìä Batch Review", "üìà Analytics"])
    
    with tab1:
        st.subheader("Individual Rule Validation")
        
        # Load validation progress
        progress = workflow.load_validation_progress()
        
        # Find next unvalidated rule
        unvalidated_indices = []
        for idx, row in rules_df.iterrows():
            rule_id = f"rule_{idx}"
            if rule_id not in progress or progress[rule_id].get('status') != 'validated':
                unvalidated_indices.append(idx)
        
        if not unvalidated_indices:
            st.success("üéâ All rules have been validated!")
            return
        
        # Rule selection
        col1, col2 = st.columns([3, 1])
        with col1:
            rule_index = st.selectbox(
                "Select Rule to Validate",
                options=unvalidated_indices,
                format_func=lambda x: f"Rule {x+1}: {rules_df.iloc[x]['service'][:50]}..."
            )
        
        with col2:
            if st.button("üé≤ Random Rule"):
                import random
                rule_index = random.choice(unvalidated_indices)
                st.rerun()
        
        # Display current rule
        current_rule = rules_df.iloc[rule_index]
        rule_id = f"rule_{rule_index}"
        
        st.markdown("### Current Rule Details")
        
        # Rule information in columns
        col1, col2 = st.columns([2, 1])
        
        with col1:
            st.markdown(f"**Service:** {current_rule['service']}")
            st.markdown(f"**Category:** {current_rule.get('category', 'N/A')}")
            st.markdown(f"**Tariff:** KES {current_rule.get('tariff_value', 'N/A')} {current_rule.get('tariff_unit', '')}")
            st.markdown(f"**Coverage:** {current_rule.get('coverage_status', 'N/A')}")
            st.markdown(f"**Facility Levels:** {current_rule.get('facility_levels', 'N/A')}")
            
            if pd.notna(current_rule.get('limits')):
                st.markdown(f"**Limits:** {current_rule['limits']}")
        
        with col2:
            st.markdown(f"**Source Page:** {current_rule.get('source_page', 'N/A')}")
            st.markdown(f"**Confidence:** {current_rule.get('confidence', 'N/A')}")
            
        # Evidence snippet
        if pd.notna(current_rule.get('evidence_snippet')):
            st.markdown("**Original Text Evidence:**")
            st.text_area(
                "Evidence",
                value=current_rule['evidence_snippet'],
                height=100,
                disabled=True,
                key=f"evidence_{rule_index}"
            )
        
        st.markdown("---")
        
        # Validation form
        st.markdown("### Expert Validation")
        
        col1, col2 = st.columns(2)
        
        with col1:
            validation_outcome = st.radio(
                "Validation Outcome",
                options=[
                    "correct_extraction",
                    "partially_correct", 
                    "incorrect_extraction",
                    "missing_information",
                    "duplicate_rule"
                ],
                format_func=lambda x: x.replace('_', ' ').title()
            )
        
        with col2:
            confidence_level = st.selectbox(
                "Confidence in Validation",
                ["High", "Medium", "Low"]
            )
        
        # Detailed feedback
        feedback_text = st.text_area(
            "Detailed Feedback/Corrections",
            placeholder="Provide specific feedback about what's correct/incorrect and any necessary corrections...",
            height=120
        )
        
        # Corrected values (if applicable)
        if validation_outcome in ["partially_correct", "incorrect_extraction"]:
            st.markdown("**Provide Corrected Information:**")
            
            col1, col2 = st.columns(2)
            with col1:
                corrected_service = st.text_input("Corrected Service Name", value=current_rule['service'])
                corrected_tariff = st.number_input("Corrected Tariff", value=float(current_rule.get('tariff_value', 0)) if pd.notna(current_rule.get('tariff_value')) else 0.0)
            
            with col2:
                corrected_unit = st.text_input("Corrected Unit", value=current_rule.get('tariff_unit', ''))
                corrected_coverage = st.selectbox("Corrected Coverage", ["included", "excluded", "conditional"])
        
        # Submit validation
        if st.button("‚úÖ Submit Validation", type="primary"):
            if not validator_name:
                st.error("Please enter your name/ID in the sidebar")
                return
            
            validation_data = {
                'rule_index': rule_index,
                'rule_id': rule_id,
                'original_data': current_rule.to_dict(),
                'validation_outcome': validation_outcome,
                'confidence_level': confidence_level,
                'feedback': feedback_text,
                'expertise_area': expertise_area
            }
            
            # Add corrected values if provided
            if validation_outcome in ["partially_correct", "incorrect_extraction"]:
                validation_data['corrections'] = {
                    'service': corrected_service,
                    'tariff_value': corrected_tariff,
                    'tariff_unit': corrected_unit,
                    'coverage_status': corrected_coverage
                }
            
            # Save validation
            workflow.save_validation(validation_data)
            
            # Update progress
            progress[rule_id] = {
                'status': 'validated',
                'validation_outcome': validation_outcome,
                'validator': validator_name
            }
            workflow.save_validation_progress(progress)
            
            st.success(f"‚úÖ Validation submitted for rule {rule_index + 1}")
            st.balloons()
            
            # Auto-advance to next rule
            st.rerun()
    
    with tab2:
        st.subheader("Batch Review Interface")
        st.info("üöß Coming soon: Interface for reviewing multiple rules by category or confidence level")
        
        # Preview functionality
        if st.checkbox("Show Rules by Category"):
            category_filter = st.selectbox("Select Category", rules_df['category'].unique())
            filtered_rules = rules_df[rules_df['category'] == category_filter]
            
            st.dataframe(
                filtered_rules[['service', 'tariff_value', 'tariff_unit', 'coverage_status', 'source_page']],
                use_container_width=True
            )
    
    with tab3:
        st.subheader("Validation Analytics")
        
        # Load all validations
        validations = []
        if os.path.exists(workflow.validation_file):
            with open(workflow.validation_file, 'r') as f:
                for line in f:
                    try:
                        validations.append(json.loads(line))
                    except:
                        continue
        
        if validations:
            validation_df = pd.DataFrame(validations)
            
            col1, col2 = st.columns(2)
            
            with col1:
                st.markdown("**Validation Outcomes Distribution**")
                outcome_counts = validation_df['validation_outcome'].value_counts()
                st.bar_chart(outcome_counts)
            
            with col2:
                st.markdown("**Validation Confidence Levels**")
                confidence_counts = validation_df['confidence_level'].value_counts()
                st.bar_chart(confidence_counts)
            
            # Validator performance
            if len(validation_df['validator'].unique()) > 1:
                st.markdown("**Validator Performance**")
                validator_stats = validation_df.groupby('validator').agg({
                    'validation_outcome': 'count',
                    'confidence_level': lambda x: (x == 'High').mean()
                }).round(3)
                validator_stats.columns = ['Total Validations', 'High Confidence Rate']
                st.dataframe(validator_stats)
        else:
            st.info("No validation data available yet")

if __name__ == "__main__":
    main()